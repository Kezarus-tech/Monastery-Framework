<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprInputText</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objGUIPanel</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///CUSTOMIZEABLE VARIABLES
text = "TEXT" // text displayed and to be edited
textMaxCharacters = 1000; //limit the amout of characters
width = 200;
height = 50;
enabled = true;

guiSprite = sprInputText;
guiSpriteFocus = sprInputText;
depth = 0; //always above panels

fontType = fntStandard;
fontScale = 1;
fontColor = c_yellow;
textOffset = 10;

selectionOffset = 10;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///INTERNAL VARS
onFocus = false;

cursorPosition = 1;
cursorSelectPosition = -1;

//REGULATES THE SPEED OF KEY STROKES
keyTimer = 0;
keyTimerLimit = 5;

origin = "TOPLEFT"; // ALWAYS TOP LEFT
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///HOVER &amp; FOCUS &amp; BLUR

if( enabled ){

    if( mouse_check_button_released(mb_left) ){
        if( mouseOver ){
            onFocus = true;
        }else{
            if(onFocus){
                onFocus = false;
                event_perform(ev_other, ev_user0); // execute on blur
            }
        }
    }

}else{
    image_blend = c_gray;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///SPRITE &amp; BLEND

if(!onFocus){
    sprite_index = guiSprite;
}else{
    image_blend = c_white;
    sprite_index = guiSpriteFocus;
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ON FOCUS KEYBOARD PRESS
if(onFocus){
        
    if( keyTimer &lt;= 0 ){
        //Shift
        if( keyboard_check(vk_shift) ){
            if(cursorSelectPosition == -1){
                cursorSelectPosition = cursorPosition;
            }
        }else{
            //Not holding shift
            if( keyboard_check(vk_left) || keyboard_check(vk_right) || 
                keyboard_check(vk_home) || keyboard_check(vk_end)
            ){
                //Cancel selection
                cursorSelectPosition = -1;
            }
        }
    
        // Cursor
        if(keyboard_check(vk_left)){ cursorPosition-=1; keyTimer = keyTimerLimit; }
        if(keyboard_check(vk_right)){ cursorPosition+=1; keyTimer = keyTimerLimit; }
        if(keyboard_check(vk_home)){ cursorPosition=1; }
        if(keyboard_check(vk_end)){ cursorPosition=string_length(text)+1; }

        // Ctrl+V
        if( keyboard_check(vk_control) &amp;&amp; keyboard_check(ord("V")) ){
            keyTimer = keyTimerLimit;
            if( clipboard_has_text() ){
                keyboard_string = clipboard_get_text();
            }
        }
        
        // Not on selected text mode
        if(cursorSelectPosition == -1){
            // Backspace
            if(keyboard_check(vk_backspace)){
                keyTimer = keyTimerLimit;
                
                text = string_delete(text, cursorPosition-1, 1);
                cursorPosition-=1;
            }
            
            // Delete
            if(keyboard_check(vk_delete)){
                keyTimer = keyTimerLimit;
                text = string_delete(text, cursorPosition, 1);
            }
        }else{
            // Selected text mode
            
            // Control Key
            if( keyboard_check(vk_control) ){
                // Ctrl+C || Ctrl+X
                if( keyboard_check(ord("C")) || keyboard_check(ord("X")) ){
                    keyTimer = keyTimerLimit;
    
                    var subString = "";
                    if( cursorPosition &gt; cursorSelectPosition ){
                        subString = string_copy(text, cursorSelectPosition, cursorPosition-cursorSelectPosition);
                    }else{
                        subString = string_copy(text, cursorPosition, cursorSelectPosition-cursorPosition);
                    }
                    clipboard_set_text(subString);
                }
            }
            
            // Delete selected text
            if( keyboard_check(vk_delete) || keyboard_check(vk_backspace) || keyboard_string != "" ||
                ( keyboard_check(vk_control) &amp;&amp; keyboard_check(ord("X")) ) ||
                ( keyboard_check(vk_control) &amp;&amp; keyboard_check(ord("V")) )
            ){
                keyTimer = keyTimerLimit;
                var wIndex, wCount;
                if( cursorPosition &gt; cursorSelectPosition ){
                    text = string_delete(text, cursorSelectPosition, cursorPosition-cursorSelectPosition);
                    cursorPosition = cursorSelectPosition;
                }else{
                    text = string_delete(text, cursorPosition, cursorSelectPosition-cursorPosition);
                }
            
                cursorSelectPosition = -1;
            }
        }
    }
    
    cursorPosition = clamp(cursorPosition, 1, string_length(text)+1);
    keyTimer = clamp(keyTimer-1, 0, 1000);
    
    
    //Set typed text
    if(keyboard_string != ""){
        var wText = keyboard_string;
        var maxLength = width - (textOffset*2);
        
        draw_set_font(fontType);
        if( string_width(text+wText) &lt;= maxLength &amp;&amp;
            string_length(text+wText) &lt;= textMaxCharacters
        ){
            text = string_insert(wText, text, cursorPosition);
            cursorPosition += string_length(wText);
        }
        keyboard_string = "";
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ON BLUR EVENT
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DRAW TEXT

if( text != "" ){
    var textX = 0;
    var textY = 0;
    
    if(origin == "CENTER"){
        draw_set_font_ext(fontType, fontColor, fa_center, fa_middle, 1);
        textX = buttonX;
        textY = buttonY;
    }else{
        draw_set_font_ext(fontType, fontColor, fa_left, fa_middle, 1);
        textX = buttonX + textOffset;
        textY = buttonY + (height div 2);
    }
    
    //DISPLAY CURSOR
    var displayText = string_insert("|", text, cursorPosition);
    if( !onFocus ){
        displayText = text;
    }
    
    //DRAW TEXT
    draw_text_outline( textX, textY, displayText, -1, 1000, c_black, fontScale );
    
    //DRAW MARKED AREA    
    if( onFocus &amp;&amp; cursorSelectPosition != -1){
        draw_set_colour(c_ltgray);
        draw_set_alpha(0.3);
        
        var wx1 = textX + string_width(string_copy(text, 0, cursorSelectPosition-1));
        var selectWidth = 0;
        var subString = "";
        if( cursorPosition &gt; cursorSelectPosition ){
            subString = string_copy(text, cursorSelectPosition, cursorPosition-cursorSelectPosition);
            selectWidth = string_width(subString);
        }else{
            wx1 += string_width("|");
            subString = string_copy(text, cursorPosition, cursorSelectPosition-cursorPosition);
            selectWidth = -string_width(subString);
        }
        var wx2 = wx1 + selectWidth;
        
        var wy1 = buttonTop + selectionOffset;
        var wy2 = buttonBottom - selectionOffset;
        draw_rectangle(wx1, wy1, wx2, wy2, false);
        
        draw_set_alpha(1);
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
